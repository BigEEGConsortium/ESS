%obj = levelDerivedStudy([fileparts(which('level1Study')) filesep 'unit_test' filesep 'dummy_level_derived_full']);

obj = level1Study('/data/ucsd_rsvp/level_1');


tmpFile = [tempname '.xml'];
obj.write(tmpFile);

Pref.Str2Num = false;
Pref.PreserveSpace = true; % keep spaces
xmlAsStructure = xml_read(tmpFile, Pref);
delete(tmpFile);

xmlAsStructure.type = 'essStudyLevel1';
xmlAsStructure.dateCreated = '';
xmlAsStructure.dateModified = datestr8601(now,'*ymdHMS');
xmlAsStructure.id = ['eegstudy.org/id/' xmlAsStructure.uuid];
xmlAsStructure = rmfield(xmlAsStructure, 'uuid');

for i=1:length(xmlAsStructure.project.funding)
    xmlAsStructure.projectFunding(i).organization = xmlAsStructure.project.funding(i).organization;
    xmlAsStructure.projectFunding(i).grantId = xmlAsStructure.project.funding(i).grantId;
end;
xmlAsStructure.projectFunding.forceArray_____=  true;
xmlAsStructure = rmfield(xmlAsStructure, 'project');

clear recordingParameterSets;
for i=1:length(xmlAsStructure.recordingParameterSets.recordingParameterSet)
    recordingParameterSets(i).recordingParameterSetLabel = xmlAsStructure.recordingParameterSets.recordingParameterSet(i).recordingParameterSetLabel;
    recordingParameterSets(i).forceArray_____=  true;
    for j=1:length(xmlAsStructure.recordingParameterSets.recordingParameterSet(i).channelType.modality)
        recordingParameterSets(i).modality(j) = xmlAsStructure.recordingParameterSets.recordingParameterSet(i).channelType.modality(j);
    end;
    
    recordingParameterSets(i).modality(1).forceArray_____=  true;
end;
xmlAsStructure.recordingParameterSets = recordingParameterSets;

clear sessions
for i=1:length(xmlAsStructure.sessions.session)
    clear dataRecordings
    for j=1:length(xmlAsStructure.sessions.session(i).dataRecordings.dataRecording)
        dataRecordings(j) = xmlAsStructure.sessions.session(i).dataRecordings.dataRecording(j);
    end;
    
    sessions{i} = xmlAsStructure.sessions.session(i);
    sessions{i}.dataRecordings = dataRecordings;
    sessions{i}.dataRecordings.forceArray_____=  true;
    % convert subject age, height and weight to numbers
    clear subjects
    for j=1:length(xmlAsStructure.sessions.session(i).subject)
        subjects{j} = xmlAsStructure.sessions.session(i).subject(j);
        %         subjects{j}.age = str2double(xmlAsStructure.sessions.session(i).subject(j).age);
        %         subjects{j}.height = str2double(xmlAsStructure.sessions.session(i).subject(j).height);
        %         subjects{j}.weight = str2double(xmlAsStructure.sessions.session(i).subject(j).weight);
        subjects{j}.forceArray_____=  true;
    end;
    
    for j=1:length(subjects)
        sessions{i}.subjects(j) = subjects{j};
    end;
    
    sessions{i} = rmfield(sessions{i}, 'subject');
    sessions{i}.forceArray_____=  true;
    
end;

xmlAsStructure = rmfield(xmlAsStructure, 'sessions');

for i=1:length(sessions)
    xmlAsStructure.sessions(i) = sessions{i};
end;


% event codes
clear eventCodes;
for i=1:length(xmlAsStructure.eventCodes.eventCode)
    eventCodes(i).code = xmlAsStructure.eventCodes.eventCode(i).code;
    eventCodes(i).taskLabel = xmlAsStructure.eventCodes.eventCode(i).taskLabel;
    eventCodes(i).label = xmlAsStructure.eventCodes.eventCode(i).label;
    ventCodes(i).description = xmlAsStructure.eventCodes.eventCode(i).description;
    ventCodes(i).tag = xmlAsStructure.eventCodes.eventCode(i).tag;
end;
xmlAsStructure.eventCodes = eventCodes

opt.ForceRootName = false;
opt.SingletCell = true;  % even single cells are saved as JSON arrays.
opt.SingletArray = false; % single numerical arrays are NOT saved as JSON arrays.
json = savejson('', xmlAsStructure);



%%
workingDirectory = fileparts(which('ess_as_json_report_script.m'));

fid= fopen([workingDirectory filesep 'manifest.js'], 'w');
fprintf(fid, '%s', ['study = ' json]);
fclose(fid);


workingDirectory = fileparts(which('ess_as_json_report_script.m'));
masterTemplate = readtxtfile([workingDirectory filesep 'master_template.html']);
html_template = readtxtfile([workingDirectory filesep 'html_template.html']);

finalHtml = strrep(masterTemplate, 'html_template', html_template);
finalHtml = strrep(finalHtml, 'data_from_ESS', json);

fid= fopen([workingDirectory filesep 'index.html'], 'w');
fprintf(fid, '%s', finalHtml);
fclose(fid);